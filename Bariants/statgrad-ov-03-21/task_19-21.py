"""
Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней.
Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может
добавить в одну из куч один камень или увеличить количество камней в куче в два раза.
Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5, 9).
За один ход из позиции (5, 9) можно получить любую из четырёх позиций: (6, 9), (10, 9), (5, 10), (5, 18).
Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. Игра завершается в тот момент,
когда суммарное количество камней в кучах становится не менее 77. Победителем считается игрок,
сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 77 или больше камней.
В начальный момент в первой куче было 8 камней, во второй куче – S камней, 1 ≤ S ≤ 68.
Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника.

Известно, что Ваня выиграл своим первым ходом после неудачного первого
хода Пети. Назовите минимальное значение S, при котором это возможно.

Для игры, описанной в задании 19, найдите все такие значения S, при которых у Пети есть выигрышная стратегия,
причём Петя не может выиграть первым ходом, но может выиграть своим вторым ходом независимо от того,
как будет ходить Ваня.
Найденные значения запишите в ответе в порядке возрастания.

Для игры, описанной в задании 19, укажите максимальное значение S,
при котором у Вани есть выигрышная стратегия, позволяющая ему выиграть при любой игре Пети.

Варианты алгоритма:
18 - в 21 тоже выдаёт V1, но 18 идёт первее
17 30 33 - искал все Р2, а в ответах: 20 - None, 34 - V1, 39 - P1
29 - V2 (единственная, правда)

21
20 34 39
40
"""
from functools import *


def moves(h):
    a, b = h
    return (a + 1, b), (a * 2, b), (a, b + 1), (a, b * 2)


@lru_cache(None)
def game(h):
    a, b = h
    if a + b >= 77:
        return 'W'

    if any(game(m) == 'W' for m in moves(h)):
        return 'P1'
    if all(game(m) == 'P1' for m in moves(h)):
        return 'V1'
    if any(game(m) == 'V1' for m in moves(h)):
        return 'P2'
    if all(game(m) == 'P1' or game(m) == 'P2' for m in moves(h)):
        return 'V2'


for s in range(1, 68 + 1):
    h = 8, s
    print(s, game(h))
