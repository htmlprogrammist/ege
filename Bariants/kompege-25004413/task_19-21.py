"""
Задание 19 (№851). Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней.
Игроки ходят по очереди, первый ход делает Петя.
За один ход игрок может добавить в одну из куч один камень или увеличить количество камней в куче в три раза.
Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. Игра завершается в тот момент,
когда суммарное количество камней в кучах становится не менее 45. Победителем считается игрок, сделавший последний ход,
т. е. первым получивший позицию, в которой в кучах будет 45 или больше камней.

В начальный момент в первой куче было 4 камня, во второй куче – S камней, 1 ≤ S ≤ 40.
Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника.

Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети.
Назовите минимальное значение S, при котором это возможно.

Задание 20.
Для игры, описанной в задании 19, найдите два таких значения S, при которых у Пети есть выигрышная стратегия,
причём Петя не может выиграть первым ходом, но может выиграть своим вторым ходом независимо от того,
как будет ходить Ваня. Найденные значения запишите в ответе в порядке возрастания.

Задание 21.
Для игры, описанной в задании 19, укажите такое значение S, при котором у Вани есть выигрышная стратегия,
позволяющая ему выиграть первым или вторым ходом при любой игре Пети, и при этом у Вани нет стратегии,
которая позволит ему гарантированно выиграть первым ходом.
"""
from functools import lru_cache


def moves(h):
    a, b = h
    return (a + 1, b), (a * 3, b), (a, b + 1), (a, b * 3)


@lru_cache(None)
def game(h):
    if sum(h) >= 45:
        return 'W'
    if any(game(m) == 'W' for m in moves(h)):
        return 'P1'
    if all(game(m) == 'P1' for m in moves(h)):
        return 'V1'
    if any(game(m) == 'V1' for m in moves(h)):
        return 'P2'
    if all(game(m) == 'P1' or game(m) == 'P2' for m in moves(h)):
        return 'V2'


for s in range(1, 41):
    h = 4, s
    print(s, game(h))
